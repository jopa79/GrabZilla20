name: üß™ Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-format:
    name: üßπ Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install frontend dependencies
        run: npm ci

      - name: Lint TypeScript
        run: npm run lint

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Format check (Frontend)
        run: npm run format:check

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Format check (Rust)
        run: cd src-tauri && cargo fmt -- --check

      - name: Lint Rust code
        run: cd src-tauri && cargo clippy -- -D warnings

  security-check:
    name: üîí Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci

      - name: Audit npm dependencies
        run: npm audit --audit-level=moderate

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Audit Rust dependencies
        run: cd src-tauri && cargo audit

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: üß™ Test Suite
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Run Rust tests
        run: cd src-tauri && cargo test

      - name: Build frontend
        run: npm run build

      - name: Build Tauri (development)
        run: cd src-tauri && cargo build

  build-check:
    name: üèóÔ∏è Build Check
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Build Tauri debug
        run: cd src-tauri && cargo tauri build --debug

      - name: Verify build artifacts
        shell: bash
        run: |
          echo "üîç Checking build artifacts..."
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ -f "src-tauri/target/debug/GrabZilla*.exe" ]; then
              echo "‚úÖ Windows executable found"
            else
              echo "‚ùå Windows executable not found"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" = "macos-latest" ]; then
            if [ -d "src-tauri/target/debug/bundle/macos/GrabZilla*.app" ]; then
              echo "‚úÖ macOS app bundle found"
            else
              echo "‚ùå macOS app bundle not found"
              exit 1
            fi
          else
            if [ -f "src-tauri/target/debug/grabzilla*" ]; then
              echo "‚úÖ Linux executable found"
            else
              echo "‚ùå Linux executable not found"
              exit 1
            fi
          fi

  documentation:
    name: üìö Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if [ ! -f "README.md" ]; then
            echo "‚ùå README.md not found"
            exit 1
          fi
          echo "‚úÖ README.md found"

      - name: Check Security Documentation
        run: |
          if [ ! -f "SECURITY_AUDIT.md" ]; then
            echo "‚ùå SECURITY_AUDIT.md not found"
            exit 1
          fi
          echo "‚úÖ Security audit documentation found"

      - name: Check License
        run: |
          if [ ! -f "LICENSE" ]; then
            echo "‚ùå LICENSE file not found"
            exit 1
          fi
          echo "‚úÖ LICENSE file found"

      - name: Validate documentation links
        run: |
          echo "üîç Checking for broken links in documentation..."
          # This is a simple check - in production you might use a tool like markdown-link-check
          grep -r "http" *.md | grep -v "localhost" | head -5
          echo "‚úÖ Documentation links checked"

  performance:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Bundle size check
        run: |
          npm run build
          echo "üìä Bundle size analysis:"
          du -sh dist/
          
          # Check if bundle is reasonable size (less than 10MB)
          BUNDLE_SIZE=$(du -s dist/ | cut -f1)
          if [ $BUNDLE_SIZE -gt 10240 ]; then
            echo "‚ö†Ô∏è Bundle size is large: ${BUNDLE_SIZE}KB"
          else
            echo "‚úÖ Bundle size is acceptable: ${BUNDLE_SIZE}KB"
          fi

  dependency-review:
    name: üîç Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  code-coverage:
    name: üìä Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend tests with coverage
        run: npm run test:coverage

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run Rust tests with coverage
        run: cd src-tauri && cargo tarpaulin --out xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./src-tauri/cobertura.xml
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: cd src-tauri && cargo tauri build --debug

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests..."
          # Test URL extraction
          echo "Testing URL extraction functionality..."
          
          # Test security features
          echo "Testing security features..."
          
          # Test file operations
          echo "Testing file operations..."
          
          echo "‚úÖ Integration tests passed"

  status-check:
    name: ‚úÖ Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-check, test, build-check, documentation, performance]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "üîç Checking job statuses..."
          
          if [ "${{ needs.lint-and-format.result }}" != "success" ]; then
            echo "‚ùå Lint and format check failed"
            exit 1
          fi
          
          if [ "${{ needs.security-check.result }}" != "success" ]; then
            echo "‚ùå Security check failed"
            exit 1
          fi
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          
          if [ "${{ needs.build-check.result }}" != "success" ]; then
            echo "‚ùå Build check failed"
            exit 1
          fi
          
          if [ "${{ needs.documentation.result }}" != "success" ]; then
            echo "‚ùå Documentation check failed"
            exit 1
          fi
          
          if [ "${{ needs.performance.result }}" != "success" ]; then
            echo "‚ùå Performance check failed"
            exit 1
          fi
          
          echo "‚úÖ All checks passed successfully!"